{"version":3,"sources":["assets/twitter-logo.svg","Components/Footer/index.jsx","contracts/index.js","container/index.jsx","App.js","index.js"],"names":["BUILD_SPACE_TWITTER_HANDLE","My_TWITTER_HANDLE","getTwitterLink","handler","Footer","className","alt","src","twitterLogo","href","target","rel","Date","getFullYear","idlAbi","solana","window","SystemProgram","web3","arr","Keypair","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","metadata","address","network","clusterApiUrl","opts","Main","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","a","isPhantom","connect","onlyIfTrusted","response","publicKey","toString","alert","console","log","connectWallet","sendGif","length","provider","getProvider","program","Program","rpc","addGif","accounts","user","wallet","getGifList","account","fetch","onInputChange","event","value","connection","Connection","Provider","createGifAccount","startStuffOff","systemProgram","programId","signers","useEffect","onLoad","addEventListener","removeEventListener","onClick","onSubmit","preventDefault","type","placeholder","onChange","map","item","index","gifLink","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8c115b46.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.4844b78f.svg\";","import React from \"react\";\r\nimport twitterLogo from \"../../assets/twitter-logo.svg\";\r\nimport \"./index.scss\";\r\n\r\n// Constants\r\nconst BUILD_SPACE_TWITTER_HANDLE = \"_buildspace\";\r\nconst My_TWITTER_HANDLE = \"imAagamJain\";\r\n\r\nconst getTwitterLink = (handler) => {\r\n  return `https://twitter.com/${handler}`;\r\n};\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <div className=\"footer-container\">\r\n      <div className=\"footer-container__twitter_header\">\r\n        <div className=\"footer-container__twitter_header__container\">\r\n          <img\r\n            alt=\"Twitter Logo\"\r\n            className=\"footer-container__twitter_header__container__twitter-logo\"\r\n            src={twitterLogo}\r\n          />\r\n          <a\r\n            className=\"footer-container__twitter_header__container__footer-text\"\r\n            href={getTwitterLink(BUILD_SPACE_TWITTER_HANDLE)}\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n          >{`built on @${BUILD_SPACE_TWITTER_HANDLE}`}</a>\r\n        </div>\r\n        <div className=\"footer-container__twitter_header__container\">\r\n          <img\r\n            alt=\"Twitter Logo\"\r\n            className=\"footer-container__twitter_header__container__twitter-logo\"\r\n            src={twitterLogo}\r\n          />\r\n          <a\r\n            className=\"footer-container__twitter_header__container__footer-text\"\r\n            href={getTwitterLink(My_TWITTER_HANDLE)}\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n          >{`built by @${My_TWITTER_HANDLE}`}</a>\r\n        </div>\r\n      </div>\r\n      <div className=\"footer-container__copyright\">\r\n        <span>Made by Aagam &copy; {new Date().getFullYear()}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import idl from \"./myepicproject.json\";\r\nconst idlAbi = idl;\r\n\r\nexport { idlAbi };\r\n","import React, { useEffect, useState } from \"react\";\r\nimport kp from \"../keypair.json\";\r\nimport { Connection, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\r\nimport { Program, Provider, web3 } from \"@project-serum/anchor\";\r\nimport \"./index.scss\";\r\nimport { Footer } from \"../Components\";\r\nimport { idlAbi } from \"../contracts\";\r\nconst { solana } = window;\r\n\r\nconst { SystemProgram, Keypair } = web3;\r\nconst arr = Object.values(kp._keypair.secretKey);\r\nconst secret = new Uint8Array(arr);\r\nconst baseAccount = web3.Keypair.fromSecretKey(secret);\r\nconst programID = new PublicKey(idlAbi.metadata.address);\r\nconst network = clusterApiUrl(\"devnet\");\r\n\r\nconst opts = {\r\n  preflightCommitment: \"finalized\",\r\n};\r\n\r\nconst TEST_GIFS = [\r\n  \"https://i.giphy.com/media/eIG0HfouRQJQr1wBzz/giphy.webp\",\r\n  \"https://media3.giphy.com/media/L71a8LW2UrKwPaWNYM/giphy.gif?cid=ecf05e47rr9qizx2msjucl1xyvuu47d7kf25tqt2lvo024uo&rid=giphy.gif&ct=g\",\r\n  \"https://media4.giphy.com/media/AeFmQjHMtEySooOc8K/giphy.gif?cid=ecf05e47qdzhdma2y3ugn32lkgi972z9mpfzocjj6z1ro4ec&rid=giphy.gif&ct=g\",\r\n  \"https://i.giphy.com/media/PAqjdPkJLDsmBRSYUp/giphy.webp\",\r\n];\r\n\r\nconst Main = () => {\r\n  const [walletAddress, setWalletAddress] = useState(null);\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const [gifList, setGifList] = useState([]);\r\n\r\n  const checkIfWalletIsConnected = async () => {\r\n    try {\r\n      if (solana) {\r\n        if (solana.isPhantom) {\r\n          const response = await solana.connect({ onlyIfTrusted: true });\r\n\r\n          setWalletAddress(response.publicKey.toString());\r\n        } else {\r\n          alert(\"Solana object not found! Get a Phantom Wallet\");\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const connectWallet = async () => {\r\n    if (solana) {\r\n      const response = await solana.connect();\r\n\r\n      setWalletAddress(response.publicKey.toString());\r\n    }\r\n  };\r\n\r\n  const sendGif = async () => {\r\n    if (inputValue.length === 0) {\r\n      return;\r\n    }\r\n    setInputValue(\"\");\r\n    console.log(\"Gif link:\", inputValue);\r\n    try {\r\n      const provider = getProvider();\r\n      const program = new Program(idlAbi, programID, provider);\r\n\r\n      await program.rpc.addGif(inputValue, {\r\n        accounts: {\r\n          baseAccount: baseAccount.publicKey,\r\n          user: provider.wallet.publicKey,\r\n        },\r\n      });\r\n\r\n      await getGifList();\r\n    } catch (error) {\r\n      console.log(\"Error sending GIF:\", error);\r\n    }\r\n  };\r\n\r\n  const getGifList = async () => {\r\n    try {\r\n      const provider = getProvider();\r\n      const program = new Program(idlAbi, programID, provider);\r\n      const account = await program.account.baseAccount.fetch(\r\n        baseAccount.publicKey\r\n      );\r\n\r\n      setGifList(account.gifList);\r\n    } catch (error) {\r\n      console.log(\"Error in getGifList: \", error);\r\n      setGifList(null);\r\n    }\r\n  };\r\n\r\n  const renderNotConnectedContainer = () => (\r\n    <button\r\n      className=\"cta-button connect-wallet-button\"\r\n      onClick={connectWallet}\r\n    >\r\n      Connect to Wallet\r\n    </button>\r\n  );\r\n\r\n  const onInputChange = (event) => {\r\n    const { value } = event.target;\r\n    setInputValue(value);\r\n  };\r\n\r\n  const getProvider = () => {\r\n    const connection = new Connection(network, opts.preflightCommitment);\r\n    const provider = new Provider(\r\n      connection,\r\n      window.solana,\r\n      opts.preflightCommitment\r\n    );\r\n    return provider;\r\n  };\r\n\r\n  const createGifAccount = async () => {\r\n    try {\r\n      const provider = getProvider();\r\n      const program = new Program(idlAbi, programID, provider);\r\n      console.log(\"ping\");\r\n      await program.rpc.startStuffOff({\r\n        accounts: {\r\n          baseAccount: baseAccount.publicKey,\r\n          user: provider.wallet.publicKey,\r\n          systemProgram: SystemProgram.programId,\r\n        },\r\n        signers: [baseAccount],\r\n      });\r\n      console.log(\r\n        \"Created a new BaseAccount w/ address:\",\r\n        baseAccount.publicKey.toString()\r\n      );\r\n      await getGifList();\r\n    } catch (error) {\r\n      console.log(\"Error creating BaseAccount account:\", error);\r\n    }\r\n  };\r\n\r\n  const renderConnectedContainer = () => {\r\n    if (gifList === null) {\r\n      return (\r\n        <div className=\"connected-container\">\r\n          <button\r\n            className=\"cta-button submit-gif-button\"\r\n            onClick={createGifAccount}\r\n          >\r\n            Do One-Time Initialization For GIF Program Account\r\n          </button>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"connected-container\">\r\n          <form\r\n            onSubmit={(event) => {\r\n              event.preventDefault();\r\n              sendGif();\r\n            }}\r\n          >\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Enter gif link!\"\r\n              value={inputValue}\r\n              onChange={onInputChange}\r\n            />\r\n            <button type=\"submit\" className=\"cta-button submit-gif-button\">\r\n              Submit\r\n            </button>\r\n          </form>\r\n          <div className=\"gif-grid\">\r\n            {gifList.map((item, index) => (\r\n              <div className=\"gif-item\" key={index}>\r\n                <img src={item.gifLink} />\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const onLoad = async () => {\r\n      await checkIfWalletIsConnected();\r\n    };\r\n    window.addEventListener(\"load\", onLoad);\r\n    return () => window.removeEventListener(\"load\", onLoad);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (walletAddress) {\r\n      console.log(\"Fetching GIF list...\");\r\n      getGifList();\r\n    }\r\n  }, [walletAddress]);\r\n\r\n  console.log(walletAddress);\r\n  return (\r\n    <div\r\n      className={\r\n        walletAddress === \"\" || walletAddress === null\r\n          ? \"authed-container\"\r\n          : \"container\"\r\n      }\r\n    >\r\n      <div className=\"header-container\">\r\n        <p className=\"header\">🖼 GIFhub</p>\r\n        <p className=\"sub-text\">View your GIF collection in the metaverse ✨</p>\r\n        {walletAddress === \"\" || walletAddress === null\r\n          ? renderNotConnectedContainer()\r\n          : renderConnectedContainer()}\r\n      </div>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import \"./App.css\";\r\nimport Main from \"./container\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <Main />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}